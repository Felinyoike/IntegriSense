# syntax=docker/dockerfile:1

FROM python:3.9-slim AS base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DJANGO_ENV=production \
    PIP_NO_CACHE_DIR=1 \
    PATH="/app/.venv/bin:$PATH"

WORKDIR /app

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev && \
    rm -rf /var/lib/apt/lists/*

# --- Builder stage ---
FROM base AS builder

# Create virtual environment
RUN python -m venv /app/.venv

# Install dependencies first for better caching
COPY --link requirements.txt ./
RUN . /app/.venv/bin/activate && \
    pip install --upgrade pip && \
    pip install -r requirements.txt

# Copy application code
COPY --link . .

# Set Django settings module
ENV DJANGO_SETTINGS_MODULE=Website.settings

# Validate Django setup
RUN . /app/.venv/bin/activate && \
    python -c "import django; django.setup()" || \
    (echo "Django setup failed"; exit 1)

# Collect static files
RUN . /app/.venv/bin/activate && \
    python manage.py collectstatic --noinput --clear || \
    (echo "Collectstatic failed"; exit 1)

# --- Final stage ---
FROM base AS final

# Create non-root user
RUN addgroup --system appuser && \
    adduser --system --ingroup appuser appuser

# Copy from builder
COPY --from=builder --chown=appuser:appuser /app /app
COPY --from=builder --chown=appuser:appuser /app/.venv /app/.venv

# Create and set permissions for media directory
RUN mkdir -p /app/media && \
    chown -R appuser:appuser /app/media && \
    chmod -R 755 /app/media

USER appuser

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

CMD ["gunicorn", "--bind", "0.0.0.0:8000", "Website.wsgi:application"]
